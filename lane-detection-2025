import numpy as np
import cv2 as cv

def thresholding(img):
    # Convert gambar ke HLS color space
    hls = cv.cvtColor(img, cv.COLOR_BGR2HLS)
    # Define thresholds putih dan kuning
    lower_white = np.array([0, 200, 0])
    upper_white = np.array([255, 255, 255])
    lower_yellow = np.array([10, 0, 100])
    upper_yellow = np.array([40, 255, 255])
    # masking untuk warna putih dan kuing
    white_mask = cv.inRange(hls, lower_white, upper_white)
    yellow_mask = cv.inRange(hls, lower_yellow, upper_yellow)
    # kombinasi masking
    combined_mask = cv.bitwise_or(white_mask, yellow_mask)
    return combined_mask

def canny(img):
    binary = thresholding(img)
    kernel = 3
    blur = cv.GaussianBlur(binary, (kernel, kernel), 0)
    canny = cv.Canny(blur, 50, 150)  # Apply Canny edge detection on the blurred image
    return canny

def region_of_interest(canny):
    height = canny.shape[0]
    width = canny.shape[1]
    mask = np.zeros_like(canny)
    triangle = np.array([[
        (200, height),
        (800, 350),
        (1200, height),
    ]], np.int32)
    cv.fillPoly(mask, triangle, 255)
    masked_image = cv.bitwise_and(canny, mask)
    return masked_image

def houghLines(cropped_canny):
    return cv.HoughLinesP(cropped_canny, 2, np.pi/180, 100, 
        np.array([]), minLineLength=40, maxLineGap=5)

def addWeighted(frame, line_image):
    return cv.addWeighted(frame, 0.8, line_image, 1, 1)

def display_lines(img, lines):
    line_image = np.zeros_like(img)
    if lines is not None:
        for line in lines:
            for x1, y1, x2, y2 in line:
                cv.line(line_image, (x1, y1), (x2, y2), (0, 0, 255), 10)
    return line_image

def make_points(image, line):
    slope, intercept = line
    y1 = int(image.shape[0])
    y2 = int(y1 * 3.0 / 5)
    x1 = int((y1 - intercept) / slope)
    x2 = int((y2 - intercept) / slope)
    return [[x1, y1, x2, y2]]

def average_slope_intercept(image, lines):
    left_fit = []
    right_fit = []
    if lines is None:
        return None
    for line in lines:
        for x1, y1, x2, y2 in line:
            fit = np.polyfit((x1, x2), (y1, y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if slope < 0:
                left_fit.append((slope, intercept))
            else:
                right_fit.append((slope, intercept))
    left_fit_average = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    left_line = make_points(image, left_fit_average)
    right_line = make_points(image, right_fit_average)
    averaged_lines = [left_line, right_line]
    return averaged_lines

cap = cv.VideoCapture('jalan1.mp4')

n = 255  
K = 2  

while cap.isOpened():
    ret, frame = cap.read()

    if not ret:
        print("Can not receive frame. Exiting . . . ")
        break
    
    # Resize original frame
    scale_percent = 30
    width = int(frame.shape[1] * scale_percent / 100)
    height = int(frame.shape[0] * scale_percent / 100)
    dim = (width, height)   
    frame = cv.resize(frame, dim, interpolation=cv.INTER_AREA)
    
    # Apply Canny edge detection
    canny_image = canny(frame)
    cropped_canny = region_of_interest(canny_image)

    # Deteksi garis pake Hough Transform
    lines = houghLines(cropped_canny)
    averaged_lines = average_slope_intercept(frame, lines)
    line_image = display_lines(frame, averaged_lines)
    combo_image = addWeighted(frame, line_image)
    
    # hasil
    cv.imshow('result', combo_image)

    # K-mean clustering
    frame1 = frame.reshape((-1, 3))
    frame1 = np.float32(frame1)
    criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    ret, label, center = cv.kmeans(frame1, K, None, criteria, 10, cv.KMEANS_RANDOM_CENTERS)
    center = np.uint8(center)
    labels = label.flatten()
    res = center[labels]
    res2 = res.reshape((frame.shape))

    # Masking gambar
    masked_image = np.zeros(frame.shape)
    masked_image = masked_image.reshape((-1, 3))

    t = np.where(center == np.amin(center))
    cluster = t[0]
    masked_image[labels == cluster] = [255, 255, 255]

    masked_image = masked_image.reshape(frame.shape)

    # tampil gambar
    cv.imshow('frame', frame)
    cv.imshow('res2', res2)
    cv.imshow('mask', masked_image)
    n = n + 1
    if cv.waitKey(1) == ord('q'):
        break

cap.release()
cv.destroyAllWindows()
